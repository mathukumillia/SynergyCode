var express=require("express"),io=require("socket.io"),connect=require("connect"),pageRouter=require("./routes/pageRouter"),http=require("http"),fs=require("fs"),util=require("util"),cookie=require("cookie"),passport=require("passport"),path=require("path"),ObjectID=require("mongodb").ObjectID,mongoose=require("mongoose"),flash=require("connect-flash"),app=express(),os=require("os"),childProcess=require("child_process"),ls,User,db,sharejs=require("share").server
app.set("port",process.env.PORT||3e3),app.set("view engine","ejs"),app.use(express.favicon()),app.use(express.logger("dev")),app.use(express.json()),app.use(express.urlencoded()),app.use(express.methodOverride()),app.use(express.cookieParser()),app.use(express.bodyParser()),app.use(express.session({secret:"secret",key:"express.sid"})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(app.router),app.use(require("stylus").middleware(path.join(__dirname,"public"))),app.use(express.static(path.join(__dirname,"/public")))
var server=http.createServer(app).listen(app.get("port"),function(){console.info("DEBUG: Server listening on port "+app.get("port")),console.info("DEBUG: Platform: "+os.platform()),"win32"==os.platform()?(console.log("DEBUG: "+__dirname+"/mongodb/data"),ls=childProcess.spawn(__dirname+"/mongodb/win32/mongod.exe",["--dbpath",__dirname+"/mongodb/data"]),ls.stderr.on("data",function(e){console.log("stderr: "+e)}),ls.on("close",function(e){console.log("child process exited with code "+e)})):console.log("DEBUG: OS support still in progress; features may be unstable"),setTimeout(function(){User=mongoose.model("User",UserSchema),mongoose.connect("mongodb://localhost/SynergyCodeCredentials"),db=mongoose.connection,db.on("error",console.error.bind(console,"connection error:")),db.once("open",function(){mongoose.connection.db.collectionNames(function(e,o){if(0==o.length){console.log("DEBUG: Database Is Empty; Creating admin Profile")
var s={_id:new ObjectID,username:"admin",password:"admin",account_level:"admin"}
db.collection("users").insert(s,function(){console.log("DEBUG: Admin Profile created")})}}),console.log("DEBUG: Database connection successful.")})},2e3)}),LocalStrategy=require("passport-local").Strategy,Schema=mongoose.Schema,UserSchema=new Schema({username:String,password:String,account_level:String}),options={db:{type:"none"}}
sharejs.attach(app,options),UserSchema.methods.validPassword=function(e){return e==this.password?!0:!1}
var requiresLogin=function(e,o,s){return e.isAuthenticated()?(s(),void 0):o.send(400)}
passport.use(new LocalStrategy(function(e,o,s){User.findOne({username:e},function(e,r){return e?(console.log("DEBUG: Unknown Error While Querying Database"),s(e)):r?r.validPassword(o)?s(null,r):(console.log("DEBUG: Incorrect Password"),s(null,!1,{message:"Incorrect password."})):(console.log("DEBUG: Incorrect Username"),s(null,!1,{message:"Incorrect username."}))})})),passport.serializeUser(function(e,o){o(null,e.id)}),passport.deserializeUser(function(e,o){User.findById(e,function(e,s){o(e,s)})})
var signout=function(e,o){e.logout(),o.redirect("/")}
app.get("/",pageRouter.index),app.get("/edit",requiresLogin,pageRouter.filetest),app.get("/logout",signout),app.get("/create",requiresLogin,pageRouter.create),app.get("/admin",requiresLogin,function(e,o){User.findOne({username:e.user.username},function(e,s){"admin"==s.account_level?o.render("adminPanel.ejs"):(console.log("DEBUG: User Has Insufficient Permissions To Visit Admin Page."),o.render("permissionProblem.ejs"))})}),app.post("/login",passport.authenticate("local",{successRedirect:"/edit",failureRedirect:"/",failureFlash:!0}))
var stringHeader="<ul class='jqueryFileTree' style='display: none;'>",stringFooter="</ul>",formatDirectory="<li class='directory collapsed'><a href='#' rel='%s/'>%s</a><li>",formatFile="<li class='file ext_%s'><a href='#' rel='%s'>%s</a></li>",createStatCallback=function(e,o,s,r){return function(i,n){if(n.isDirectory())e.write(util.format(formatDirectory,o,s))
else{var t=s.slice(s.lastIndexOf(".")+1)
e.write(util.format(formatFile,t,o,s))}r&&e.end(stringFooter)}}
app.post("/loadFileTree",function(e,o){o.writeHead(200,{"content-type":"text/plain"}),o.write(stringHeader),fs.readdir(__dirname+"/public/editableFiles/",function(e,s){for(var r=0;r<s.length;r++){var i=s[r],n=util.format("%s%s",__dirname+"/public/editableFiles/",i),t=r===s.length-1,a=createStatCallback(o,n,i,t)
fs.stat(n,a)}})})
var sio=io.listen(server)
sio.set("authorization",function(e,o){return e.headers.cookie?(e.cookie=cookie.parse(e.headers.cookie),e.sessionID=connect.utils.parseSignedCookie(e.cookie["express.sid"],"secret"),e.cookie["express.sid"]==e.sessionID?o("Cookie is invalid.",!1):(o(null,!0),void 0)):o("No cookie transmitted.",!1)}),sio.sockets.on("connection",function(e){e.emit("message",{message:"Welcome to the chat!"}),e.on("send",function(e){sio.sockets.emit("message",e)}),e.on("fileLoad",function(o){console.log("DEBUG: File Load Initiated "),filePath=o.message,fileNameArray=filePath.split("/"),fileName=fileNameArray[fileNameArray.length-1],fs.readFile(__dirname+"/public/editableFiles/"+fileName,"utf8",function(o,s){if(o)throw console.log(o),o
e.emit("fileData",{message:s})}),console.log("DEBUG: File Loaded")})
var o=0
e.on("fileChanged",function(e){o>=5?(fs.writeFile("public/editableFiles/"+fileName,e.message,function(e){if(e)throw e
console.log("DEBUG: FileChanged Event Received On Server")}),o=0):o++}),e.on("createFile",function(e){fs.writeFile("public/editableFiles/"+e.message,"",function(e){if(e)throw e
console.log("DEBUG: File Created")})})})
